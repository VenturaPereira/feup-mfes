class Student

types
	public String = seq of char;
	
values
	-- TODO Define values here

instance variables
	private id: String := "xxxxxxxxxxx";
	private balance: rat := 0.0;
	private queue: PrintingQueue := new PrintingQueue();
	inv balance >= 0.0;

operations
	-- Student constructor.
	public Student: String ==> Student
	Student(idd) == (id := idd; return self)
	pre len id = 11		-- In a similar fashion to UP's numbering system.
	post self.id = idd and RESULT = self;

	-- Add funds to the student's printing account.
	public add_balance: rat ==> ()
	add_balance(value) == balance := balance + value
	pre value <> 0
	post balance = balance~ + value;
		
	-- Add a document to the student's own printing queue.
	public push_document: Document ==> ()
	push_document(document) == queue.push_document(document)
	pre true
	post document in set elems queue.get_documents();
	
	-- Delete document from the student's own printing queue.
	public delete_document: Document ==> ()
	delete_document(document) == queue.delete_document(document)
	pre document in set elems queue.get_documents()
	post true;
	
	-- Report printer malfunction.
	public report_malfunction: Service * Malfunction ==> ()
	report_malfunction(s, m) == s.push_issue(m)
	post true;
	
	-- Getter method for printing queue's documents.
	public pure get_queue: () ==> seq of Document
	get_queue() == return self.queue.get_documents()
	pre true
	post RESULT = self.queue.get_documents();
		
	-- Getter method for name.
	public pure get_id: () ==> String
	get_id() == return self.id
	pre true
	post RESULT = self.id;
	
	-- Getter method for balance.
	public pure get_balance: () ==> rat
	get_balance() == return self.balance
	pre true
	post RESULT = self.balance;
	
functions
	-- TODO Define functiones here
	
traces
	-- TODO Define Combinatorial Test Traces here

end Student